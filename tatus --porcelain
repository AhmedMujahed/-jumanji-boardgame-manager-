[1mdiff --git a/src/components/ActivityLog.tsx b/src/components/ActivityLog.tsx[m
[1mindex 6f53aaf..ba9f7bd 100644[m
[1m--- a/src/components/ActivityLog.tsx[m
[1m+++ b/src/components/ActivityLog.tsx[m
[36m@@ -14,6 +14,24 @@[m [mconst ActivityLogComponent: React.FC<ActivityLogProps> = ({ logs, user, onClearA[m
   const [selectedUser, setSelectedUser] = useState<string>('all');[m
   const [searchTerm, setSearchTerm] = useState('');[m
 [m
[32m+[m[32m  // Additional security check - only owners can access this component[m
[32m+[m[32m  if (user.role !== 'owner') {[m
[32m+[m[32m    return ([m
[32m+[m[32m      <div className="text-center py-12">[m
[32m+[m[32m        <div className="text-6xl mb-4">🔒</div>[m
[32m+[m[32m        <h3 className="text-2xl font-arcade font-bold text-gold-bright mb-4">[m
[32m+[m[32m          Access Denied[m
[32m+[m[32m        </h3>[m
[32m+[m[32m        <p className="text-neon-bright text-lg font-arcade">[m
[32m+[m[32m          You don't have permission to view activity logs.[m
[32m+[m[32m        </p>[m
[32m+[m[32m        <p className="text-neon-bright/80 text-md font-arcade mt-2">[m
[32m+[m[32m          This feature is restricted to owners only.[m
[32m+[m[32m        </p>[m
[32m+[m[32m      </div>[m
[32m+[m[32m    );[m
[32m+[m[32m  }[m
[32m+[m
   useEffect(() => {[m
     let filtered = logs;[m
 [m
[1mdiff --git a/src/components/AnalyticsDashboard.tsx b/src/components/AnalyticsDashboard.tsx[m
[1mindex 05cc972..cd5897f 100644[m
[1m--- a/src/components/AnalyticsDashboard.tsx[m
[1m+++ b/src/components/AnalyticsDashboard.tsx[m
[36m@@ -1,6 +1,6 @@[m
 import React, { useState, useEffect } from 'react';[m
[31m-import { format, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, eachDayOfInterval, eachWeekOfInterval, eachMonthOfInterval } from 'date-fns';[m
[31m-import { User, Customer, Session, RevenueData, CustomerStats } from '../types';[m
[32m+[m[32mimport { format, startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, eachDayOfInterval, eachWeekOfInterval, eachMonthOfInterval, subMonths, startOfYear, endOfYear } from 'date-fns';[m
[32m+[m[32mimport { User, Customer, Session, RevenueData, CustomerStats, MonthlyMetrics, MonthlyAnalytics } from '../types';[m
 [m
 interface AnalyticsDashboardProps {[m
   customers: Customer[];[m
[36m@@ -9,10 +9,175 @@[m [minterface AnalyticsDashboardProps {[m
 }[m
 [m
 const AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({ customers, sessions, user }) => {[m
[31m-  const [timeRange, setTimeRange] = useState<'day' | 'week' | 'month'>('week');[m
[31m-  const [selectedMetric, setSelectedMetric] = useState<'revenue' | 'sessions' | 'customers'>('revenue');[m
[32m+[m[32m  const [timeRange, setTimeRange] = useState<'day' | 'week' | 'month' | 'year'>('month');[m
[32m+[m[32m  const [selectedMetric, setSelectedMetric] = useState<'revenue' | 'sessions' | 'customers' | 'hours'>('revenue');[m
 [m
[31m-  // Calculate analytics data[m
[32m+[m[32m  // Load persistent analytics data from localStorage[m
[32m+[m[32m  const [persistentData, setPersistentData] = useState<MonthlyMetrics[]>(() => {[m
[32m+[m[32m    const saved = localStorage.getItem('jumanji_analytics_data');[m
[32m+[m[32m    return saved ? JSON.parse(saved) : [];[m
[32m+[m[32m  });[m
[32m+[m
[32m+[m[32m  // Save data to localStorage whenever it changes - but only when it actually changes[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    if (persistentData.length > 0) {[m
[32m+[m[32m      localStorage.setItem('jumanji_analytics_data', JSON.stringify(persistentData));[m
[32m+[m[32m    }[m
[32m+[m[32m  }, [persistentData]);[m
[32m+[m
[32m+[m[32m  // Calculate monthly analytics data with persistence[m
[32m+[m[32m  const getMonthlyAnalytics = (): MonthlyAnalytics => {[m
[32m+[m[32m    const now = new Date();[m
[32m+[m[32m    const currentMonthStart = startOfMonth(now);[m
[32m+[m[32m    const currentMonthEnd = endOfMonth(now);[m
[32m+[m[32m    const previousMonthStart = startOfMonth(subMonths(now, 1));[m
[32m+[m[32m    const previousMonthEnd = endOfMonth(subMonths(now, 1));[m
[32m+[m[32m    const yearStart = startOfYear(now);[m
[32m+[m[32m    const yearEnd = endOfYear(now);[m
[32m+[m
[32m+[m[32m    // Current month metrics[m
[32m+[m[32m    const currentMonthSessions = sessions.filter(session => {[m
[32m+[m[32m      const sessionDate = new Date(session.startTime);[m
[32m+[m[32m      return sessionDate >= currentMonthStart && sessionDate <= currentMonthEnd;[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    const currentMonth: MonthlyMetrics = {[m
[32m+[m[32m      year: now.getFullYear(),[m
[32m+[m[32m      month: now.getMonth() + 1,[m
[32m+[m[32m      monthName: format(now, 'MMMM'),[m
[32m+[m[32m      revenue: currentMonthSessions.reduce((sum, s) => sum + s.totalCost, 0),[m
[32m+[m[32m      sessions: currentMonthSessions.length,[m
[32m+[m[32m      hours: currentMonthSessions.reduce((sum, s) => sum + s.hours, 0),[m
[32m+[m[32m      customers: new Set(currentMonthSessions.map(s => s.customerId)).size,[m
[32m+[m[32m      averageSessionLength: currentMonthSessions.length > 0[m[41m [m
[32m+[m[32m        ? currentMonthSessions.reduce((sum, s) => sum + s.hours, 0) / currentMonthSessions.length[m[41m [m
[32m+[m[32m        : 0[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    // Previous month metrics[m
[32m+[m[32m    const previousMonthSessions = sessions.filter(session => {[m
[32m+[m[32m      const sessionDate = new Date(session.startTime);[m
[32m+[m[32m      return sessionDate >= previousMonthStart && sessionDate <= previousMonthEnd;[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    const previousMonth: MonthlyMetrics = {[m
[32m+[m[32m      year: previousMonthStart.getFullYear(),[m
[32m+[m[32m      month: previousMonthStart.getMonth() + 1,[m
[32m+[m[32m      monthName: format(previousMonthStart, 'MMMM'),[m
[32m+[m[32m      revenue: previousMonthSessions.reduce((sum, s) => sum + s.totalCost, 0),[m
[32m+[m[32m      sessions: previousMonthSessions.length,[m
[32m+[m[32m      hours: previousMonthSessions.reduce((sum, s) => sum + s.hours, 0),[m
[32m+[m[32m      customers: new Set(previousMonthSessions.map(s => s.customerId)).size,[m
[32m+[m[32m      averageSessionLength: previousMonthSessions.length > 0[m[41m [m
[32m+[m[32m        ? previousMonthSessions.reduce((sum, s) => sum + s.hours, 0) / previousMonthSessions.length[m[41m [m
[32m+[m[32m        : 0[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    // Year to date metrics[m
[32m+[m[32m    const yearToDateSessions = sessions.filter(session => {[m
[32m+[m[32m      const sessionDate = new Date(session.startTime);[m
[32m+[m[32m      return sessionDate >= yearStart && sessionDate <= yearEnd;[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    const yearToDate = {[m
[32m+[m[32m      totalRevenue: yearToDateSessions.reduce((sum, s) => sum + s.totalCost, 0),[m
[32m+[m[32m      totalSessions: yearToDateSessions.length,[m
[32m+[m[32m      totalHours: yearToDateSessions.reduce((sum, s) => sum + s.hours, 0),[m
[32m+[m[32m      totalCustomers: new Set(yearToDateSessions.map(s => s.customerId)).size[m
[32m+[m[32m    };[m
[32m+[m
[32m+[m[32m    // Monthly trends (last 12 months) - combine live data with persistent data[m
[32m+[m[32m    const monthlyTrends: MonthlyMetrics[] = [];[m
[32m+[m[32m    for (let i = 0; i < 12; i++) {[m
[32m+[m[32m      const monthStart = startOfMonth(subMonths(now, i));[m
[32m+[m[32m      const monthEnd = endOfMonth(subMonths(now, i));[m
[32m+[m[41m      [m
[32m+[m[32m      // Check if we have persistent data for this month[m
[32m+[m[32m      const persistentMonth = persistentData.find(p =>[m[41m [m
[32m+[m[32m        p.year === monthStart.getFullYear() && p.month === monthStart.getMonth() + 1[m
[32m+[m[32m      );[m
[32m+[m[41m      [m
[32m+[m[32m      if (persistentMonth) {[m
[32m+[m[32m        monthlyTrends.push(persistentMonth);[m
[32m+[m[32m      } else {[m
[32m+[m[32m        // Calculate from live sessions if no persistent data[m
[32m+[m[32m        const monthSessions = sessions.filter(session => {[m
[32m+[m[32m          const sessionDate = new Date(session.startTime);[m
[32m+[m[32m          return sessionDate >= monthStart && sessionDate <= monthEnd;[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        monthlyTrends.push({[m
[32m+[m[32m          year: monthStart.getFullYear(),[m
[32m+[m[32m          month: monthStart.getMonth() + 1,[m
[32m+[m[32m          monthName: format(monthStart, 'MMM yyyy'),[m
[32m+[m[32m          revenue: monthSessions.reduce((sum, s) => sum + s.totalCost, 0),[m
[32m+[m[32m          sessions: monthSessions.length,[m
[32m+[m[32m          hours: monthSessions.reduce((sum, s) => sum + s.hours, 0),[m
[32m+[m[32m          customers: new Set(monthSessions.map(s => s.customerId)).size,[m
[32m+[m[32m          averageSessionLength: monthSessions.length > 0[m[41m [m
[32m+[m[32m            ? monthSessions.reduce((sum, s) => sum + s.hours, 0) / monthSessions.length[m[41m [m
[32m+[m[32m            : 0[m
[32m+[m[32m        });[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return {[m
[32m+[m[32m      currentMonth,[m
[32m+[m[32m      previousMonth,[m
[32m+[m[32m      monthlyTrends: monthlyTrends.reverse(), // Show oldest to newest[m
[32m+[m[32m      yearToDate[m
[32m+[m[32m    };[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  // Update persistent data with current month - use useCallback to prevent infinite loops[m
[32m+[m[32m  const updatePersistentData = React.useCallback((currentMonth: MonthlyMetrics) => {[m
[32m+[m[32m    setPersistentData(prevData => {[m
[32m+[m[32m      const existingMonthIndex = prevData.findIndex(p =>[m[41m [m
[32m+[m[32m        p.year === currentMonth.year && p.month === currentMonth.month[m
[32m+[m[32m      );[m
[32m+[m[41m      [m
[32m+[m[32m      if (existingMonthIndex >= 0) {[m
[32m+[m[32m        // Update existing month data[m
[32m+[m[32m        const updatedData = [...prevData];[m
[32m+[m[32m        updatedData[existingMonthIndex] = currentMonth;[m
[32m+[m[32m        return updatedData;[m
[32m+[m[32m      } else {[m
[32m+[m[32m        // Add new month data[m
[32m+[m[32m        return [...prevData, currentMonth];[m
[32m+[m[32m      }[m
[32m+[m[32m    });[m
[32m+[m[32m  }, []);[m
[32m+[m
[32m+[m[32m  // Update persistent data when sessions change[m
[32m+[m[32m  useEffect(() => {[m
[32m+[m[32m    if (sessions.length > 0) {[m
[32m+[m[32m      const now = new Date();[m
[32m+[m[32m      const currentMonthStart = startOfMonth(now);[m
[32m+[m[32m      const currentMonthEnd = endOfMonth(now);[m
[32m+[m[41m      [m
[32m+[m[32m      const currentMonthSessions = sessions.filter(session => {[m
[32m+[m[32m        const sessionDate = new Date(session.startTime);[m
[32m+[m[32m        return sessionDate >= currentMonthStart && sessionDate <= currentMonthEnd;[m
[32m+[m[32m      });[m
[32m+[m
[32m+[m[32m      const currentMonth: MonthlyMetrics = {[m
[32m+[m[32m        year: now.getFullYear(),[m
[32m+[m[32m        month: now.getMonth() + 1,[m
[32m+[m[32m        monthName: format(now, 'MMMM'),[m
[32m+[m[32m        revenue: currentMonthSessions.reduce((sum, s) => sum + s.totalCost, 0),[m
[32m+[m[32m        sessions: currentMonthSessions.length,[m
[32m+[m[32m        hours: currentMonthSessions.reduce((sum, s) => sum + s.hours, 0),[m
[32m+[m[32m        customers: new Set(currentMonthSessions.map(s => s.customerId)).size,[m
[32m+[m[32m        averageSessionLength: currentMonthSessions.length > 0[m[41m [m
[32m+[m[32m          ? currentMonthSessions.reduce((sum, s) => sum + s.hours, 0) / currentMonthSessions.length[m[41m [m
[32m+[m[32m          : 0[m
[32m+[m[32m      };[m
[32m+[m
[32m+[m[32m      updatePersistentData(currentMonth);[m
[32m+[m[32m    }[m
[32m+[m[32m  }, [sessions, updatePersistentData]);[m
[32m+[m
[32m+[m[32m  // Calculate analytics data for selected time range[m
   const getAnalyticsData = () => {[m
     const now = new Date();[m
     let startDate: Date;[m
[36m@@ -31,6 +196,10 @@[m [mconst AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({ customers, sess[m
         startDate = startOfMonth(now);[m
         endDate = endOfMonth(now);[m
         break;[m
[32m+[m[32m      case 'year':[m
[32m+[m[32m        startDate = startOfYear(now);[m
[32m+[m[32m        endDate = endOfYear(now);[m
[32m+[m[32m        break;[m
     }[m
 [m
     const filteredSessions = sessions.filter(session => {[m
[36m@@ -97,25 +266,47 @@[m [mconst AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({ customers, sess[m
           end: endOfMonth(now)[m
         });[m
         break;[m
[32m+[m[32m      case 'year':[m
[32m+[m[32m        intervals = eachMonthOfInterval({[m
[32m+[m[32m          start: startOfYear(now),[m
[32m+[m[32m          end: endOfYear(now)[m
[32m+[m[32m        });[m
[32m+[m[32m        break;[m
     }[m
 [m
     return intervals.map(date => {[m
[31m-      const daySessions = sessions.filter(s => {[m
[31m-        const sessionDate = new Date(s.startTime);[m
[31m-        return sessionDate >= startOfDay(date) && sessionDate <= endOfDay(date);[m
[31m-      });[m
[32m+[m[32m      let daySessions: Session[];[m
[32m+[m[41m      [m
[32m+[m[32m      if (timeRange === 'year') {[m
[32m+[m[32m        // For year view, group by month[m
[32m+[m[32m        const monthStart = startOfMonth(date);[m
[32m+[m[32m        const monthEnd = endOfMonth(date);[m
[32m+[m[32m        daySessions = sessions.filter(s => {[m
[32m+[m[32m          const sessionDate = new Date(s.startTime);[m
[32m+[m[32m          return sessionDate >= monthStart && sessionDate <= monthEnd;[m
[32m+[m[32m        });[m
[32m+[m[32m      } else {[m
[32m+[m[32m        // For other views, group by day[m
[32m+[m[32m        daySessions = sessions.filter(s => {[m
[32m+[m[32m          const sessionDate = new Date(s.startTime);[m
[32m+[m[32m          return sessionDate >= startOfDay(date) && sessionDate <= endOfDay(date);[m
[32m+[m[32m        });[m
[32m+[m[32m      }[m
 [m
       return {[m
[31m-        date: format(date, timeRange === 'day' ? 'HH:mm' : 'MMM dd'),[m
[32m+[m[32m        date: timeRange === 'year' ? format(date, 'MMM') : format(date, timeRange === 'day' ? 'HH:mm' : 'MMM dd'),[m
         revenue: daySessions.reduce((sum, s) => sum + s.totalCost, 0),[m
[31m-        sessions: daySessions.length[m
[32m+[m[32m        sessions: daySessions.length,[m
[32m+[m[32m        hours: daySessions.reduce((sum, s) => sum + s.hours, 0)[m
       };[m
     });[m
   };[m
 [m
   const analytics = getAnalyticsData();[m
[32m+[m[32m  const monthlyAnalytics = getMonthlyAnalytics();[m
   const topCustomers = getTopCustomers();[m
   const revenueTrend = getRevenueTrend();[m
[32m+[m[32m  const now = new Date();[m
 [m
   return ([m
     <div className="space-y-8">[m
[36m@@ -135,7 +326,7 @@[m [mconst AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({ customers, sess[m
         [m
         {/* Time Range Selector */}[m
         <div className="flex space-x-2 bg-light-100 dark:bg-void-800 rounded-xl p-1 border-2 border-void-300 dark:border-neon-bright/50">[m
[31m-          {(['day', 'week', 'month'] as const).map((range) => ([m
[32m+[m[32m          {(['day', 'week', 'month', 'year'] as const).map((range) => ([m
             <button[m
               key={range}[m
               onClick={() => setTimeRange(range)}[m
[36m@@ -151,6 +342,88 @@[m [mconst AnalyticsDashboard: React.FC<AnalyticsDashboardProps> = ({ customers, sess[m
         </div>[m
       </div>[m
 [m
[32m+[m[32m      {/* Monthly Overview Section */}[m
[32m+[m[32m      <div className="bg-void-900/90 backdrop-blur-md rounded-3xl shadow-2xl border-2 border-gold-bright p-8">[m
[32m+[m[32m        <h3 className="text-2xl font-arcade font-black text-gold-bright mb-6">[m
[32m+[m[32m          📅 Monthly Overview[m
[32m+[m[32m        </h3>[m
[32m+[m[41m        [m
[32m+[m[32m        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">[m
[32m+[m[32m          <div className="text-center">[m
[32m+[m[32m            <p className="text-neon-bright/80 font-arcade text-sm">Current Month</p>[m
[32m+[m[32m            <p className="text-2xl font-arcade font-black text-gold-bright">[m
[32m+[m[32m              {monthlyAnalytics.currentMonth.monthName}[m
[32m+[m[32m            </p>[m
[32m+[m[32m            <p className="text-3xl font-arcade font-black text-neon-bright">[m
[32m+[m[32m              {monthlyAnalytics.currentMonth.revenue} SAR[m
[32m+[m[32m            </p>[m
[32m+[m[32m            <p className="text-lg font-arcade text-success-400">[m
[32m+[m[32m              {monthlyAnalytics.currentMonth.hours.toFixed(1)}h[m
[32m+[m[32m            </p>[m
[32m+[m[32m          </div>[m
[32m+[m[41m          [m
[32m+[m[32m          <div className="text-center">[m
[32m+[m[32m            <p className="text-neon-bright/80 font-arcade text-sm">Previous Month</p>[m
[32m+[m[32m            <p className="text-2xl font-arcade font-black text-gold-bright">[m
[32m+[m[32m              {monthlyAnalytics.previousMonth.monthName}[m
[32m+[m[32m            </p>[m
[32m+[m[32m            <p className="text-3xl font-arcade font-black text-neon-bright">[m
[32m+[m[32m              {monthlyAnalytics.previousMonth.revenue} SAR[m
[32m+[m[32m            </p>[m
[32m+[m[32m            <p className="text-lg font-arcade text-success-400">[m
[32m+[m[32m              {monthlyAnalytics.previousMonth.hours.toFixed(1)}h[m
[32m+[m[32m            </p>[m
[32m+[m[32m          </div>[m
[32m+[m[41m          [m
[32m+[m[32m          <div className="text-center">[m
[32m+[m[32m            <p className="text-neon-bright/80 font-arcade text-sm">Year to Date</p>[m
[32m+[m[32m            <p className="text-2xl font-arcade font-black text-gold-bright">[m
[32m+[m[32m              {now.getFullYear()}[m
[32m+[m[32m            </p>[m
[32m+[m[32m            <p className="text-3xl font-arcade font-black text-neon-bright">[m
[32m+[m[32m              {monthlyAnalytics.yearToDate.totalRevenue} SAR[m
[32m+[m[32m            </p>[m
[32m+[m[32m            <p className="text-lg font-arcade text-success-400">[m
[32m+[m[32m              {monthlyAnalytics.yearToDate.totalHours.toFixed(1)}h[m
[32m+[m[32m            </p>[m
[32m+[m[32m          </div>[m
[32m+[m[41m          [m
[32m+[m[32m          <div className="text-center">[m
[32m+[m[32m            <p className="text-neon-bright/80 font-arcade text-sm">Monthly Growth</p>[m
[32m+[m[32m            <p className="text-2xl font-arcade font-black text-gold-bright">[m
[32m+[m[32m              {monthlyAnalytics.previousMonth.revenue > 0[m[41m [m
[32m+[m[32m                ? (((monthlyAnalytics.currentMonth.revenue - monthlyAnalytics.previousMonth.revenue) / monthlyAnalytics.previousMonth.revenue) * 100).toFixed(1)[m
[32m+[m[32m                : '0'[m
[32m+[m[32m              }%[m
[32m+[m[32m            </p>[m
[32m+[m[32m            <p className={`text-lg font-arcade ${[m
[32m+[m[32m              monthlyAnalytics.currentMonth.revenue >= monthlyAnalytics.previousMonth.revenue[m[41m [m
[32m+[m[32m                ? 'text-success-400'[m[41m [m
[32m+[m[32m                : 'text-danger-400'[m
[32m+[m[32m            }`}>[m
[32m+[m[32m              {monthlyAnalytics.currentMonth.revenue >= monthlyAnalytics.previousMonth.revenue ? '↗️' : '↘️'}[m
[32m+[m[32m            </p>[m
[32m+[m[32m          </div>[m
